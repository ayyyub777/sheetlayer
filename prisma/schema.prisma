generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  setup         Boolean   @default(false)
  picture       String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  sessions     Session[]
  Workspace    Workspace[]
  connections  Connection[]
  Subscription Subscription[]

  @@map(name: "users")
}

model Connection {
  id           String   @id @default(uuid())
  userId       String
  provider     String
  accessToken  String?
  refreshToken String?
  expiresAt    DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, userId], name: "provider_user_unique")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Workspace {
  id     String @id @default(cuid())
  userId String
  name   String @unique
  apis   Api[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "workspaces")
}

model Api {
  id          String   @id @default(cuid())
  title       String   @unique
  spreadsheet String
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @default(now()) @map(name: "updated_at")
  workspaceId String

  Workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@map(name: "Apis")
}

model Plan {
  id                 Int            @id @default(autoincrement())
  productId          Int
  productName        String?
  variantId          Int            @unique
  name               String
  description        String?
  price              String
  isUsageBased       Boolean        @default(false)
  interval           String?
  intervalCount      Int?
  trialInterval      String?
  trialIntervalCount Int?
  sort               Int?
  Subscription       Subscription[]

  @@map("plan")
}

model WebhookEvent {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  eventName       String
  processed       Boolean  @default(false)
  body            Json
  processingError String?
}

model Subscription {
  id                 Int     @id @default(autoincrement())
  lemonSqueezyId     String  @unique
  orderId            Int
  name               String
  email              String
  status             String
  statusFormatted    String
  renewsAt           String?
  endsAt             String?
  trialEndsAt        String?
  price              String
  isUsageBased       Boolean @default(false)
  isPaused           Boolean @default(false)
  subscriptionItemId Int?    @default(autoincrement())
  userId             String
  planId             Int
  user               User    @relation(fields: [userId], references: [id])
  plan               Plan    @relation(fields: [planId], references: [id])

  @@map("subscription")
}
